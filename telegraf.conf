# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply surround
# them with ${}. For strings the variable must be within quotes (ie, "${STR_VAR}"),
# for numbers and booleans they should be plain (ie, ${INT_VAR}, ${BOOL_VAR})


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "1000ms"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Log at debug level.
  # debug = false
  ## Log only error level messages.
  # quiet = false

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  # logtarget = "file"

  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  # logfile = ""

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0d"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  ## Pick a timezone to use when logging or type 'local' for local time.
  ## Example: America/Chicago
  # log_with_timezone = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################


# Configuration for sending metrics to InfluxDB
[[outputs.influxdb_v2]]
  ## The URLs of the InfluxDB cluster nodes.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
  urls = ["http://localhost:8086"]

  ## Token for authentication.
  token = "LW6Znim9oAi3ZZB0vrjHmF0ZCnPdML8eCbN8f0ZHRxj0Yhod5AVQ5h6mNgLFrDKk4S1vmPuOVOt-Lh1dd797yg=="

  ## Organization is the name of the organization you wish to write to; must exist.
  organization = "FHP"

  ## Destination bucket to write into.
  bucket = "DATABASE"

  ## The value of this tag will be used to determine the bucket.  If this
  ## tag is not set the 'bucket' option is used as the default.
  # bucket_tag = ""

  ## If true, the bucket tag will not be added to the metric.
  # exclude_bucket_tag = false

  ## Timeout for HTTP messages.
  # timeout = "5s"

  ## Additional HTTP headers
  # http_headers = {"X-Special-Header" = "Special-Value"}

  ## HTTP Proxy override, if unset values the standard proxy environment
  ## variables are consulted to determine which proxy, if any, should be used.
  # http_proxy = "http://corporate.proxy:3128"

  ## HTTP User-Agent
  # user_agent = "telegraf"

  ## Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "gzip"

  ## Enable or disable uint support for writing uints influxdb 2.0.
  # influx_uint_support = false

  ## Optional TLS Config for use on HTTP connections.
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################
[[inputs.opcua]]
  ## Metric name
  # name = "opcua"
  #
  ## OPC UA Endpoint URL
  endpoint = "opc.tcp://192.168.2.230:4840"
  #
  ## Maximum time allowed to establish a connect to the endpoint.
  connect_timeout = "10s"
  #
  ## Maximum time allowed for a request over the estabilished connection.
  # request_timeout = "5s"
  #
  ## Security policy, one of "None", "Basic128Rsa15", "Basic256",
  ## "Basic256Sha256", or "auto"
  security_policy = "None"
  #
  ## Security mode, one of "None", "Sign", "SignAndEncrypt", or "auto"
  security_mode = "None"
  #
  ## Path to cert.pem. Required when security mode or policy isn't "None".
  ## If cert path is not supplied, self-signed cert and key will be generated.
  # certificate = "/etc/telegraf/cert.pem"
  #
  ## Path to private key.pem. Required when security mode or policy isn't "None".
  ## If key path is not supplied, self-signed cert and key will be generated.
  # private_key = "/etc/telegraf/key.pem"
  #
  ## Authentication Method, one of "Certificate", "UserName", or "Anonymous".  To
  ## authenticate using a specific ID, select 'Certificate' or 'UserName'
  # auth_method = "Anonymous"
  #
  ## Username. Required for auth_method = "UserName"
  # username = ""
  #
  ## Password. Required for auth_method = "UserName"
  # password = ""
  #
  ## Option to select the metric timestamp to use. Valid options are:
  ##     "gather" -- uses the time of receiving the data in telegraf
  ##     "server" -- uses the timestamp provided by the server
  ##     "source" -- uses the timestamp provided by the source
  # timestamp = "gather"
  #
  ## Node ID configuration
  ## name              - field name to use in the output
  ## namespace         - OPC UA namespace of the node (integer value 0 thru 3)
  ## identifier_type   - OPC UA ID type (s=string, i=numeric, g=guid, b=opaque)
  ## identifier        - OPC UA ID (tag as shown in opcua browser)
  ## tags              - extra tags to be added to the output metric (optional)
  ## Example:
  ## {name="ProductUri", namespace="0", identifier_type="i", identifier="2262", tags=[["tag1","value1"],["tag2","value2]]}
  nodes = [
    {name="PCG_Automate", namespace="3", identifier_type="s", identifier='"AI_PCG"'},
    {name="PCMA_Automate", namespace="3", identifier_type="s", identifier='"AI_PCMA"'},
    {name="PCMB_Automate", namespace="3", identifier_type="s", identifier='"AI_PCMB"'},
    {name="PGCM_Automate", namespace="3", identifier_type="s", identifier='"AI_PGCM"'},
    {name="PGHPV_Automate", namespace="3", identifier_type="s", identifier='"AI_PGHPV"'},
    {name="PPBP_Automate", namespace="3", identifier_type="s", identifier='"AI_PPBP"'},
    {name="PPHP1_Automate", namespace="3", identifier_type="s", identifier='"AI_PPHP1"'},
    {name="PPHP1B_Automate", namespace="3", identifier_type="s", identifier='"AI_PPHP1B"'},
    {name="PPHP_Automate", namespace="3", identifier_type="s", identifier='"AI_PPHP2"'},
    {name="PPHPVA_Automate", namespace="3", identifier_type="s", identifier='"AI_PPHPVA"'},
    {name="PPHPVB_Automate", namespace="3", identifier_type="s", identifier='"AI_PPHPVB"'},
    {name="PPPHP2_Automate", namespace="3", identifier_type="s", identifier='"AI_PPPHP2"'},
    {name="PSLS_Automate", namespace="3", identifier_type="s", identifier='"AI_PSLS"'},
    {name="PSMR_Automate", namespace="3", identifier_type="s", identifier='"AI_PSMR"'},
    {name="PSVME_Automate", namespace="3", identifier_type="s", identifier='"AI_PSVME"'},
    {name="QA1_Automate", namespace="3", identifier_type="s", identifier='"AI_QA1"'},
    {name="QB1_Automate", namespace="3", identifier_type="s", identifier='"AI_QB1"'},
    {name="QHPVA_Automate", namespace="3", identifier_type="s", identifier='"AI_QHPVA"'},
    {name="QHPVB_Automate", namespace="3", identifier_type="s", identifier='"AI_QHPVB"'},
    {name="QPL_Automate", namespace="3", identifier_type="s", identifier='"AI_QPL"'},
    {name="RIHPV_Automate", namespace="3", identifier_type="s", identifier='"AI_RIHPV"'},
    {name="RLBP_Automate", namespace="3", identifier_type="s", identifier='"AI_RLBP"'},
    {name="RLCP_Automate", namespace="3", identifier_type="s", identifier='"AI_RLCP"'},
    {name="RQHP1_Automate", namespace="3", identifier_type="s", identifier='"AI_RQHP1"'},
    {name="RQHP2_Automate", namespace="3", identifier_type="s", identifier='"AI_RQHP2"'},
    {name="VME_Automate", namespace="3", identifier_type="s", identifier='"AI_VME"'},
    {name="VML_Automate", namespace="3", identifier_type="s", identifier='"AI_VML"'},
    {name="VMR_Automate", namespace="3", identifier_type="s", identifier='"AI_VMR"'},
    {name="VMT_Automate", namespace="3", identifier_type="s", identifier='"AI_VMT"'},
    {name="CHPV_Automate", namespace="3", identifier_type="s", identifier='"AQ_CHPV"'},
    {name="CPBP_Automate", namespace="3", identifier_type="s", identifier='"AQ_CPBP"'},
    {name="CPCP_Automate", namespace="3", identifier_type="s", identifier='"AQ_CPCP"'},
    {name="CPHP1_Automate", namespace="3", identifier_type="s", identifier='"AQ_CPHP1"'},
    {name="CPHP2_Automate", namespace="3", identifier_type="s", identifier='"AQ_CPHP2"'},
    {name="CVTHERM_Automate", namespace="3", identifier_type="s", identifier='"AQ_CVTHERM"'},
    {name="QHP1_Automate", namespace="3", identifier_type="s", identifier='"AQ_QHP1"'},
    {name="QHP2_Automate", namespace="3", identifier_type="s", identifier='"AQ_QHP2"'},
    {name="THT", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_THT"'},
    {name="THH", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_THH"'},
    {name="TMT", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_TMT"'},
    {name="PCG", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_PCG"'},
    {name="PCMA", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_PCMA"'},
    {name="PCMB", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_PCMB"'},
    {name="PGCM", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_PGCM"'},
    {name="PGHPV", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_PGHPV"'},
    {name="PPBP", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_PPBP"'},
    {name="PPHP1", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_PPHP1"'},
    {name="PPHP1B", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_PPHP1B"'},
    {name="PPHP2", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_PPHP2"'},
    {name="PPHPVA", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_PPHPVA"'},
    {name="PPHPVB", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_PPHPVB"'},
    {name="PPPHP2", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_PPPHP2"'},
    {name="PSLS", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_PSLS"'},
    {name="PSMR", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_PSMR"'},
    {name="PSVME", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_PSVME"'},
    {name="QA1", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_QA1"'},
    {name="QB1", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_QB1"'},
    {name="QHPVA", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_QHPVA"'},
    {name="QHPVB", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_QHPVB"'},
    {name="QPL", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_QPL"'},
    {name="RIHPV", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_RIHPV"'},
    {name="RLBP", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_RLBP"'},
    {name="RLCP", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_RLCP"'},
    {name="RQHP1", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_RQHP1"'},
    {name="RQHP2", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_RQHP2"'},
    {name="VME", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_VME"'},
    {name="VML", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_VML"'},
    {name="VMR", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_VMR"'},
    {name="VMT", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AI_VMT"'},
    {name="CHPV", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AQ_CHPV"'},
    {name="CPBP", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AQ_CPBP"'},
    {name="CPCP", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AQ_CPCP"'},
    {name="CPHP1", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AQ_CPHP1"'},
    {name="CPHP2", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AQ_CPHP2"'},
    {name="CVTHERM", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AQ_CVTHERM"'},
    {name="QHP1", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AQ_QHP1"'},
    {name="QHP2", namespace="3", identifier_type="s", identifier='"DB23_AnaWorkValues"."AQ_QHP2"'},
    #Information PV
    {name="Num_Certification", namespace="3", identifier_type="s", identifier='"DB03_HMI"."Num_Certification"'},
    #Electrovannes :
    {name="EVA1", namespace="3", identifier_type="s", identifier='"EVA1"'},
    {name="EVA2", namespace="3", identifier_type="s", identifier='"EVA2"'},
    {name="EVA3", namespace="3", identifier_type="s", identifier='"EVA3"'},
    {name="EVB1", namespace="3", identifier_type="s", identifier='"EVB1"'},
    {name="EVB2", namespace="3", identifier_type="s", identifier='"EVB2"'},
    {name="EVB3", namespace="3", identifier_type="s", identifier='"EVB3"'},
    {name="EVSC", namespace="3", identifier_type="s", identifier='"EVSC"'},
    {name="EV2V", namespace="3", identifier_type="s", identifier='"EV2V"'},
    {name="EVSBM", namespace="3", identifier_type="s", identifier='"EVSBM"'},
    {name="EVBOOST", namespace="3", identifier_type="s", identifier='"EVB00ST"'},
    {name="EVLS", namespace="3", identifier_type="s", identifier='"EVLS"'},
    {name="EVHP1", namespace="3", identifier_type="s", identifier='"EVHP1"'},
    {name="EVHP11", namespace="3", identifier_type="s", identifier='"EVHP11"'},
    {name="EVHP2", namespace="3", identifier_type="s", identifier='"EVHP2"'},
    {name="EVG1", namespace="3", identifier_type="s", identifier='"EVG1"'},
    {name="EVG2", namespace="3", identifier_type="s", identifier='"EVG2"'},

  ]
  #
  ## Node Group
  ## Sets defaults for OPC UA namespace and ID type so they aren't required in
  ## every node.  A group can also have a metric name that overrides the main
  ## plugin metric name.
  ##
  ## Multiple node groups are allowed
  #[[inputs.opcua.group]]
  ## Group Metric name. Overrides the top level name.  If unset, the
  ## top level name is used.
  # name = "DB"
  #
  ## Group default namespace. If a node in the group doesn't set its
  ## namespace, this is used.
  # namespace =
  #
  ## Group default identifier type. If a node in the group doesn't set its
  ## namespace, this is used.
  # identifier_type =
  #
  ## Node ID Configuration.  Array of nodes with the same settings as above.
  # nodes = [
  #  {name="", namespace="", identifier_type="", identifier=""},
  #  {name="", namespace="", identifier_type="", identifier=""},
  #]
